{
  "abi": [
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLiquidityPerTick",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tickSpacing",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "factory()": "c45a0155",
    "fee()": "ddca3f43",
    "maxLiquidityPerTick()": "70cf754a",
    "tickSpacing()": "d0c93a7c",
    "token0()": "0dfe1681",
    "token1()": "d21220a7"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are fixed for a pool forever, i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/v3-core/interfaces/pool/IUniswapV3PoolImmutables.sol\":\"IUniswapV3PoolImmutables\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":v3-core/=lib/v3-core/\"],\"viaIR\":true},\"sources\":{\"lib/v3-core/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0x13299389e0ea80ba516f78bfeeee78eff4617d4609715fead11a734a65ea9ee1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://171e95f9d9dcc13883e377eaa2c4716c64f4f71ef3ab42ff5971d74ad6d77eea\",\"dweb:/ipfs/QmTPQFBZGQQu2nsEy25Tzy6CR1P79hEJUEtMviw8xP5VMZ\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "factory",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "fee",
          "outputs": [
            {
              "internalType": "uint24",
              "name": "",
              "type": "uint24"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "maxLiquidityPerTick",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "tickSpacing",
          "outputs": [
            {
              "internalType": "int24",
              "name": "",
              "type": "int24"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "token0",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "token1",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "factory()": {
            "returns": {
              "_0": "The contract address"
            }
          },
          "fee()": {
            "returns": {
              "_0": "The fee"
            }
          },
          "maxLiquidityPerTick()": {
            "details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
            "returns": {
              "_0": "The max amount of liquidity per tick"
            }
          },
          "tickSpacing()": {
            "details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
            "returns": {
              "_0": "The tick spacing"
            }
          },
          "token0()": {
            "returns": {
              "_0": "The token contract address"
            }
          },
          "token1()": {
            "returns": {
              "_0": "The token contract address"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "factory()": {
            "notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
          },
          "fee()": {
            "notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
          },
          "maxLiquidityPerTick()": {
            "notice": "The maximum amount of position liquidity that can use any tick in the range"
          },
          "tickSpacing()": {
            "notice": "The pool tick spacing"
          },
          "token0()": {
            "notice": "The first of the two tokens of the pool, sorted by address"
          },
          "token1()": {
            "notice": "The second of the two tokens of the pool, sorted by address"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":v3-core/=lib/v3-core/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "lib/v3-core/interfaces/pool/IUniswapV3PoolImmutables.sol": "IUniswapV3PoolImmutables"
      },
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/v3-core/interfaces/pool/IUniswapV3PoolImmutables.sol": {
        "keccak256": "0x13299389e0ea80ba516f78bfeeee78eff4617d4609715fead11a734a65ea9ee1",
        "urls": [
          "bzz-raw://171e95f9d9dcc13883e377eaa2c4716c64f4f71ef3ab42ff5971d74ad6d77eea",
          "dweb:/ipfs/QmTPQFBZGQQu2nsEy25Tzy6CR1P79hEJUEtMviw8xP5VMZ"
        ],
        "license": "GPL-2.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "lib/v3-core/interfaces/pool/IUniswapV3PoolImmutables.sol",
    "id": 70229,
    "exportedSymbols": {
      "IUniswapV3PoolImmutables": [
        70228
      ]
    },
    "nodeType": "SourceUnit",
    "src": "46:1799:74",
    "nodes": [
      {
        "id": 70190,
        "nodeType": "PragmaDirective",
        "src": "46:23:74",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".19"
        ]
      },
      {
        "id": 70228,
        "nodeType": "ContractDefinition",
        "src": "228:1615:74",
        "nodes": [
          {
            "id": 70197,
            "nodeType": "FunctionDefinition",
            "src": "415:51:74",
            "nodes": [],
            "documentation": {
              "id": 70192,
              "nodeType": "StructuredDocumentation",
              "src": "270:139:74",
              "text": "@notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n @return The contract address"
            },
            "functionSelector": "c45a0155",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "factory",
            "nameLocation": "424:7:74",
            "parameters": {
              "id": 70193,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "431:2:74"
            },
            "returnParameters": {
              "id": 70196,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 70195,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 70197,
                  "src": "457:7:74",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 70194,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "457:7:74",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "456:9:74"
            },
            "scope": 70228,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 70203,
            "nodeType": "FunctionDefinition",
            "src": "594:50:74",
            "nodes": [],
            "documentation": {
              "id": 70198,
              "nodeType": "StructuredDocumentation",
              "src": "474:114:74",
              "text": "@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"
            },
            "functionSelector": "0dfe1681",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "token0",
            "nameLocation": "603:6:74",
            "parameters": {
              "id": 70199,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "609:2:74"
            },
            "returnParameters": {
              "id": 70202,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 70201,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 70203,
                  "src": "635:7:74",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 70200,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "635:7:74",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "634:9:74"
            },
            "scope": 70228,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 70209,
            "nodeType": "FunctionDefinition",
            "src": "773:50:74",
            "nodes": [],
            "documentation": {
              "id": 70204,
              "nodeType": "StructuredDocumentation",
              "src": "652:115:74",
              "text": "@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"
            },
            "functionSelector": "d21220a7",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "token1",
            "nameLocation": "782:6:74",
            "parameters": {
              "id": 70205,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "788:2:74"
            },
            "returnParameters": {
              "id": 70208,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 70207,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 70209,
                  "src": "814:7:74",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 70206,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "814:7:74",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "813:9:74"
            },
            "scope": 70228,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 70215,
            "nodeType": "FunctionDefinition",
            "src": "922:46:74",
            "nodes": [],
            "documentation": {
              "id": 70210,
              "nodeType": "StructuredDocumentation",
              "src": "831:85:74",
              "text": "@notice The pool's fee in hundredths of a bip, i.e. 1e-6\n @return The fee"
            },
            "functionSelector": "ddca3f43",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "fee",
            "nameLocation": "931:3:74",
            "parameters": {
              "id": 70211,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "934:2:74"
            },
            "returnParameters": {
              "id": 70214,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 70213,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 70215,
                  "src": "960:6:74",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint24",
                    "typeString": "uint24"
                  },
                  "typeName": {
                    "id": 70212,
                    "name": "uint24",
                    "nodeType": "ElementaryTypeName",
                    "src": "960:6:74",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint24",
                      "typeString": "uint24"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "959:8:74"
            },
            "scope": 70228,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 70221,
            "nodeType": "FunctionDefinition",
            "src": "1344:53:74",
            "nodes": [],
            "documentation": {
              "id": 70216,
              "nodeType": "StructuredDocumentation",
              "src": "976:362:74",
              "text": "@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"
            },
            "functionSelector": "d0c93a7c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "tickSpacing",
            "nameLocation": "1353:11:74",
            "parameters": {
              "id": 70217,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1364:2:74"
            },
            "returnParameters": {
              "id": 70220,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 70219,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 70221,
                  "src": "1390:5:74",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int24",
                    "typeString": "int24"
                  },
                  "typeName": {
                    "id": 70218,
                    "name": "int24",
                    "nodeType": "ElementaryTypeName",
                    "src": "1390:5:74",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int24",
                      "typeString": "int24"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1389:7:74"
            },
            "scope": 70228,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 70227,
            "nodeType": "FunctionDefinition",
            "src": "1777:63:74",
            "nodes": [],
            "documentation": {
              "id": 70222,
              "nodeType": "StructuredDocumentation",
              "src": "1405:366:74",
              "text": "@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"
            },
            "functionSelector": "70cf754a",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "maxLiquidityPerTick",
            "nameLocation": "1786:19:74",
            "parameters": {
              "id": 70223,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1805:2:74"
            },
            "returnParameters": {
              "id": 70226,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 70225,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 70227,
                  "src": "1831:7:74",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 70224,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "1831:7:74",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1830:9:74"
            },
            "scope": 70228,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IUniswapV3PoolImmutables",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 70191,
          "nodeType": "StructuredDocumentation",
          "src": "73:155:74",
          "text": "@title Pool state that never changes\n @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          70228
        ],
        "name": "IUniswapV3PoolImmutables",
        "nameLocation": "238:24:74",
        "scope": 70229,
        "usedErrors": []
      }
    ],
    "license": "GPL-2.0-or-later"
  },
  "id": 74
}